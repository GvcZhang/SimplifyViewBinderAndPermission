package com.curious.vbp.processors;

import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.List;

public class BindingClass {


    private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
    private final List<OnclickResourceBinding> onClickBindings = new ArrayList<>();
    private final List<BindViewResourceBinding> bindViewBindings = new ArrayList<>();

    private static final ClassName VIEW_BINDER = ClassName.get("com.curious.vbp.lib", "ViewBinder");
    private static final ClassName FINDER = ClassName.get("com.curious.vbp.lib", "Finder");
    private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
    private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");

    private final String classPackage;
    private final String className;
    private final String targetClass;
    private final String classFqcn;

    public BindingClass(String classPackage, String className, String targetClass, String classFqcn) {
        this.classPackage = classPackage;
        this.className = className;
        this.targetClass = targetClass;
        this.classFqcn = classFqcn;
    }

    public void addResourceBinding(FieldResourceBinding binding) {
        resourceBindings.add(binding);
    }

    public void addOnClickBinding(OnclickResourceBinding binding) {
        onClickBindings.add(binding);
    }

    public void addBindViewBinding(BindViewResourceBinding binding) {
        bindViewBindings.add(binding);
    }

    public JavaFile brewJava() {

        TypeSpec.Builder result = TypeSpec.classBuilder(className)
                .addModifiers(Modifier.PUBLIC)
                .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));

        result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));

        result.addMethod(createBindMethod());

        return JavaFile.builder(classPackage, result.build())
                .addFileComment("// This file was generated by VBP. Do not modify!!")
                .build();
    }

    private MethodSpec createBindMethod() {
        MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(FINDER, "finder", Modifier.FINAL)
                .addParameter(Object.class, "source")
                .addParameter(TypeVariableName.get("T"), "target", Modifier.FINAL);


        if (hasResourceBinding()) {
            // 过滤警告
            result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
                    .addMember("value", "$S", "ResourceType")
                    .build());

            result.addStatement("$T context = finder.getContext(source)", CONTEXT);
            result.addStatement("$T res = context.getResources()", RESOURCES);
            // Resource
            for (FieldResourceBinding binding : resourceBindings) {
                result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
                        binding.getId());
            }

            //bind view
            for (BindViewResourceBinding binding : bindViewBindings) {
                result.addStatement("target.$L = ($T)(finder.findView(target, $L))", binding.getName(), binding.getResId());
            }
        }

        if (hasOnclickBinding()) {
            for (OnclickResourceBinding binding : onClickBindings) {
                for (int id : binding.getResIds()) {
                    result.addStatement("finder.findView(target,$L).setOnClickListener(view->target.$L(view))",
                            id, binding.getMethodName());
                }
            }
        }

        return result.build();
    }

    private boolean hasOnclickBinding() {
        return !onClickBindings.isEmpty();
    }

    private boolean hasResourceBinding() {
        return !(resourceBindings.isEmpty()) || !bindViewBindings.isEmpty();
    }
}
